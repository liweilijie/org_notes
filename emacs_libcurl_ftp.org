#+TITLE:     ftp by libcurl
#+AUTHOR:    liweilijie
#+EMAIL:     liweilijie@gmail.com
#+DATE:      2013-01-18 FRI
#+DESCRIPTION: ftp by libcurl
#+KEYWORDS: ftp
#+CATEGORIES: C
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   /liweilijie
#+LINK_HOME: /liweilijie
#+XSLT:

* ftp模式

  首先了解一些主动与被动模式的情况。因为在实际的网络环境当中，由于防火墙，或者多WAN等情况的影响，你应该多次尝试这些情况。

** 基础

来自 [http://www.phpweblog.net/killjin/archive/2008/01/06/2653.html]

FTP是仅基于TCP的服务，不支持UDP。 与众不同的是FTP使用2个端口，一个数据端口和一个命令端口（也可叫做控制端口）。通常来说这两
个端口是21－命令端口和20－数据端口。但当我们发现根据（FTP工作）方式的不同数据端口并不总是20时，混乱产生了。

** 主动FTP

主动方式的FTP是这样的：客户端从一个任意的非特权端口N（N>;1024）连接到FTP服务器的命令端口，也就是21端口。然后客户端开始监听
端口N+1，并发送FTP命令“port N+1”到FTP服务器。接着服务器会从它自己的数据端口（20）连接到客户端指定的数据端口（N+1）。

针对FTP服务器前面的防火墙来说，必须允许以下通讯才能支持主动方式FTP：

 1. 任何端口到FTP服务器的21端口 （客户端初始化的连接 S<-C）
 2. FTP服务器的21端口到大于1023的端口（服务器响应客户端的控制端口 S->C）
 3. FTP服务器的20端口到大于1023的端口（服务器端初始化数据连接到客户端的数据端口 S->C）
 4. 大于1023端口到FTP服务器的20端口（客户端发送ACK响应到服务器的数据端口 S<-C）

    画出来的话，连接过程大概是下图的样子：

    在第1步中，客户端的命令端口与FTP服务器的命令端口建立连接，并发送命令“PORT 1027”。然后在第2步中，FTP服务器给客户端的命令
    端口返回一个"ACK"。在第3步中，FTP服务器发起一个从它自己的数据端口（20）到客户端先前指定的数据端口（1027）的连接，最后客
    户端在第4步中给服务器端返回一个"ACK"。

    主动方式FTP的主要问题实际上在于客户端。FTP的客户端并没有实际建立一个到服务器数据端口的连接，它只是简单的告诉服务器自己
    监听的端口号，服务器再回来连接客户端这个指定的端口。对于客户端的防火墙来说，这是从外部系统建立到内部客户端的连接，这是
    通常会被阻塞的。

    主动FTP的例子

    下面是一个主动FTP会话的实际例子。当然服务器名、IP地址和用户名都做了改动。在这个例子中，FTP会话从
     testbox1.slacksite.com (192.168.150.80)，一个运行标准的FTP命令行客户端的Linux工作站，发起到testbox2.slacksite.com
    (192.168.150.90)，一个运行ProFTPd 1.2.2RC2的Linux工作站。debugging（-d）选项用来在FTP客户端显示连接的详细过程。红色的文
    字是 debugging信息，显示的是发送到服务器的实际FTP命令和所产生的回应信息。服务器的输出信息用黑色字表示，用户的输入信息用
    粗体字表示。

    仔细考虑这个对话过程我们会发现一些有趣的事情。我们可以看到当 PORT 命令被提交时，它指定了客户端(192.168.150.80)上的一个
    端口而不是服务器的。当我们用被动FTP时我们会看到相反的现象。我们再来关注PORT命令的格式。就象你在下面的例子看到的一样，它
    是一个由六个被逗号隔开的数字组成的序列。前四个表示IP地址，后两个组成了用于数据连接的端口号。用第五个数乘以256再加上第六
    个数就得到了实际的端口号。下面例子中端口号就是( (14*256) + 178) = 3762。我们可以用netstat来验证这个端口信息。

	#+BEGIN_HTML
	<div class="cnblogs_Highlighter">
	<pre class="brush:bash">

	    testbox1: {/home/p-t/slacker/public_html} % ftp -d testbox2
	    Connected to testbox2.slacksite.com.
	    220 testbox2.slacksite.com FTP server ready.
	    Name (testbox2:slacker): slacker
	    ---> USER slacker
	    331 Password required for slacker.
	    Password: TmpPass
	    ---> PASS XXXX
	    230 User slacker logged in.
	    ---> SYST
	    215 UNIX Type: L8
	    Remote system type is UNIX.
	    Using binary mode to transfer files.
	    ftp> ls
	    ftp: setsockopt (ignored): Permission denied
	    ---> PORT 192,168,150,80,14,178
	    200 PORT command successful.
	    ---> LIST
	    150 Opening ASCII mode data connection for file list.
	    drwx------   3 slacker    users         104 Jul 27 01:45 public_html
	    226 Transfer complete.
	    ftp> quit
	    ---> QUIT
	    221 Goodbye.

	</pre>
	</div>
	#+END_HTML


** 被动FTP

    为了解决服务器发起到客户的连接的问题，人们开发了一种不同的FTP连接方式。这就是所谓的被动方式，或者叫做PASV，当客户端通知
    服务器它处于被动模式时才启用。

    在被动方式FTP中，命令连接和数据连接都由客户端，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题
    。当开启一个FTP连接时，客户端打开两个任意的非特权本地端口（N >; 1024和N+1）。第一个端口连接服务器的21端口，但与主动方式
    的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口，而是提交PASV命令。这样做的结果是服务器会开启一个任意的
    非特权端口（P >; 1024），并发送PORT P命令给客户端。然后客户端发起从本地端口N+1到服务器的端口P的连接用来传送数据。

    对于服务器端的防火墙来说，必须允许下面的通讯才能支持被动方式的FTP:

     1. 从任何端口到服务器的21端口 （客户端初始化的连接 S<-C）
     2. 服务器的21端口到任何大于1023的端口 （服务器响应到客户端的控制端口的连接 S->C）
     3. 从任何端口到服务器的大于1023端口 （入；客户端初始化数据连接到服务器指定的任意端口 S<-C）
     4. 服务器的大于1023端口到远程的大于1023的端口（出；服务器发送ACK响应和数据到客户端的数据端口 S->C）

        画出来的话，被动方式的FTP连接过程大概是下图的样子：
        [passiv]

        在第1步中，客户端的命令端口与服务器的命令端口建立连接，并发送命令“PASV”。然后在第2步中，服务器返回命令"PORT 2024"，
        告诉客户端（服务器）用哪个端口侦听数据连接。在第3步中，客户端初始化一个从自己的数据端口到服务器端指定的数据端口的数
        据连接。最后服务器在第4 步中给客户端的数据端口返回一个"ACK"响应。

        被动方式的FTP解决了客户端的许多问题，但同时给服务器端带来了更多的问题。最大的问题是需要允许从任意远程终端到服务器高
        位端口的连接。幸运的是，许多FTP守护程序，包括流行的WU-FTPD允许管理员指定FTP服务器使用的端口范围。详细内容参看附录1
        。

        第二个问题是客户端有的支持被动模式，有的不支持被动模式，必须考虑如何能支持这些客户端，以及为他们提供解决办法。例如
        ，Solaris提供的FTP命令行工具就不支持被动模式，需要第三方的FTP客户端，比如ncftp。

        随着WWW的广泛流行，许多人习惯用web浏览器作为FTP客户端。大多数浏览器只在访问 *ftp://* 这样的URL时才支持被动模式。这到底
        是好还是坏取决于服务器和防火墙的配置。

        被动FTP的例子

        下面是一个被动FTP会话的实际例子，只是服务器名、IP地址和用户名都做了改动。在这个例子中，FTP会话从
         testbox1.slacksite.com (192.168.150.80)，一个运行标准的FTP命令行客户端的Linux工作站，发起到testbox2.slacksite.com
        (192.168.150.90)，一个运行ProFTPd 1.2.2RC2的Linux工作站。debugging（-d）选项用来在FTP客户端显示连接的详细过程。红色
        的文字是 debugging信息，显示的是发送到服务器的实际FTP命令和所产生的回应信息。服务器的输出信息用黑色字表示，用户的输
        入信息用粗体字表示。

        注意此例中的PORT命令与主动FTP例子的不同。这里，我们看到是服务器(192.168.150.90)而不是客户端的一个端口被打开了。可以
        跟上面的主动FTP例子中的PORT命令格式对比一下。


	     #+BEGIN_HTML
	     <div class="cnblogs_Highlighter">
	     <pre class="brush:bash">

		     testbox1: {/home/p-t/slacker/public_html} % ftp -d testbox2
		     Connected to testbox2.slacksite.com.
		     220 testbox2.slacksite.com FTP server ready.
		     Name (testbox2:slacker): slacker
		     ---> USER slacker
		     331 Password required for slacker.
		     Password: TmpPass
		     ---> PASS XXXX
		     230 User slacker logged in.
		     ---> SYST
		     215 UNIX Type: L8
		     Remote system type is UNIX.
		     Using binary mode to transfer files.
		     ftp> passive
		     Passive mode on.
		     ftp> ls
		     ftp: setsockopt (ignored): Permission denied
		     ---> PASV
		     227 Entering Passive Mode (192,168,150,90,195,149).
		     ---> LIST
		     150 Opening ASCII mode data connection for file list
		     drwx------   3 slacker    users         104 Jul 27 01:45 public_html
		     226 Transfer complete.
		     ftp>; quit
		     ---> QUIT
		     221 Goodbye.

	     </pre>
	     </div>
	     #+END_HTML



** 总结

        下面的图表会帮助管理员们记住每种FTP方式是怎样工作的：

        - 主动FTP：
           + 命令连接：客户端 >1023端口 -> 服务器 21端口
           + 数据连接：客户端 >1023端口 <- 服务器 20端口

        - 被动FTP：
           + 命令连接：客户端 >1023端口 -> 服务器 21端口
           + 数据连接：客户端 >1023端口 -> 服务器 >1023端口

        下面是主动与被动FTP优缺点的简要总结：

        主动FTP对FTP服务器的管理有利，但对客户端的管理不利。因为FTP服务器企图与客户端的高位随机端口建立连接，而这个端口很有
        可能被客户端的防火墙阻塞掉。被动FTP对FTP客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立两个连
        接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。

        幸运的是，有折衷的办法。既然FTP服务器的管理员需要他们的服务器有最多的客户连接，那么必须得支持被动FTP。我们可以通过
        为FTP服务器指定一个有限的端口范围来减小服务器高位端口的暴露。这样，不在这个范围的任何端口会被服务器的防火墙阻塞。虽
        然这没有消除所有针对服务器的危险，但它大大减少了危险。详细信息参看附录1。

        参考资料

        O'Reilly出版的《组建Internet防火墙》（第二版，Brent Chapman，Elizabeth Zwicky著）是一本很不错的参考资料。里面讲述了各
        种Internet协议如何工作，以及有关防火墙的例子。

        最权威的FTP参考资料是RFC 959，它是FTP协议的官方规范。RFC的资料可以从许多网站上下载，例如：ftp://nic.merit.edu/
        documents/rfc/rfc0959.txt 。

