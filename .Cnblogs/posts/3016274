
(("dateCreated" :datetime (20839 60836)) ("description" . "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
               \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">
<head>
<title>有关重定向</title>
<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>
<meta name=\"title\" content=\"有关重定向\"/>
<meta name=\"generator\" content=\"Org-mode\"/>
<meta name=\"generated\" content=\"2013-04-12 Fri\"/>
<meta name=\"author\" content=\"liweilijie\"/>
<meta name=\"description\" content=\"有关重定向操作\"/>
<meta name=\"keywords\" content=\"shell dup\"/>
<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  {margin-left:auto; margin-right:0px;  text-align:right;}
  .left   {margin-left:0px;  margin-right:auto; text-align:left;}
  .center {margin-left:auto; margin-right:auto; text-align:center;}
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top;  }
  th.right  { text-align:center;  }
  th.left   { text-align:center;   }
  th.center { text-align:center; }
  td.right  { text-align:right;  }
  td.left   { text-align:left;   }
  td.center { text-align:center; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  div.inlinetask {
    padding:10px;
    border:2px solid gray;
    margin:10px;
    background: #ffffcc;
  }
  textarea { overflow-x: auto; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>
<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012  Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>

</head>
<body>
<div id=\"org-div-home-and-up\" style=\"text-align:right;font-size:70%;white-space:nowrap;\">
 <a accesskey=\"h\" href=\"/liweilijie\"> UP </a>
 |
 <a accesskey=\"H\" href=\"/liweilijie\"> HOME </a>
</div>

<div id=\"preamble\">

</div>

<div id=\"content\">
<h1 class=\"title\">有关重定向</h1>


<div id=\"table-of-contents\">
<h2>Table of Contents</h2>
<div id=\"text-table-of-contents\">
<ul>
<li><a href=\"#sec-1\">1 文件描述符处理</a></li>
<li><a href=\"#sec-2\">2 exec 改变i/o</a></li>
<li><a href=\"#sec-3\">3 Using exec</a>
<ul>
<li><a href=\"#sec-3-1\">3.1 Example 16-1. Redirecting stdin using exec</a></li>
<li><a href=\"#sec-3-2\">3.2 Example 16-2. Redirecting stdout using exec</a></li>
<li><a href=\"#sec-3-3\">3.3 Example 16-3. Redirecting both stdin and stdout in the same script with exec</a></li>
<li><a href=\"#sec-3-4\">3.4 Example 16-4. Avoiding a subshell</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 文件描述符处理</h2>
<div class=\"outline-text-2\" id=\"text-1\">



<p>
简单示例：
</p>


<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

make 1> results 2> ERRS
# 上面的命令是将make的标准输出(文件描述符1)传给results
# 并将标准错误输出(文件描述符2)传给ERRS.

make 1> results 2> /dev/null
# 上面是将标准错误扔掉

</pre>
</div>

<p>
注意： <b>1&gt; result</b> 里的 <b>1</b> 其实没有必要，供输出重定向的默认文件描述符是标准输出：也就是 <b>文件描述符1</b> .
</p>
<p>
更进一步：
</p>


<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

make > result 2>&1

# 重定向 > result 让文件描述符1(标准输出)作为文件results
# 接下来的重定向 2>&1有两部分：
#          一： 2> 重定向文件描述符2,也就是标准错误输出。
#          二： &1 是shell的语法：无论文件描述符1在哪里。
# 在本例中，文件描述符1是results文件，所以那里就是文件描述符2要附加的地方。

</pre>
</div>

<p>
注意： <b>2&gt;&amp;1</b> 必须连在一起，中间不能有任何空格。
</p>

</div>

</div>

<div id=\"outline-container-2\" class=\"outline-2\">
<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> exec 改变i/o</h2>
<div class=\"outline-text-2\" id=\"text-2\">


<p>
在使用exec时，如果只有I/O重定向而没有任何参数时，exec会改变shell的文件描述符：
</p>


<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

exec 2> /tmp/$0.log #重定向shell本身的标准错误输出

exec 3< /some/file  #打开新文件描述符3
...
read name rank serno <&3 #从该文件读取

</pre>
</div>



</div>

</div>

<div id=\"outline-container-3\" class=\"outline-2\">
<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Using exec</h2>
<div class=\"outline-text-2\" id=\"text-3\">


<p>
An exec &lt;filename command redirects stdin to a file. From that point on, all stdin comes from
that file, rather than its normal source (usually keyboard input). This provides a method of
reading a file line by line and possibly parsing each line of input using sed and/or awk.
</p>

</div>

<div id=\"outline-container-3-1\" class=\"outline-3\">
<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> Example 16-1. Redirecting stdin using exec</h3>
<div class=\"outline-text-3\" id=\"text-3-1\">




<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">
#!/bin/bash
# Redirecting stdin using 'exec'.


exec 6<&0          # Link file descriptor #6 with stdin.
                   # Saves stdin.

exec < data-file   # stdin replaced by file \"data-file\"

read a1            # Reads first line of file \"data-file\".
read a2            # Reads second line of file \"data-file.\"

echo
echo \"Following lines read from file.\"
echo \"-------------------------------\"
echo $a1
echo $a2

echo; echo; echo

exec 0<&6 6<&-
#  Now restore stdin from fd #6, where it had been saved,
#+ and close fd #6 ( 6<&- ) to free it for other processes to use.
#
# <&6 6<&-    also works.

echo -n \"Enter data  \"
read b1  # Now \"read\" functions as expected, reading from normal stdin.
echo \"Input read from stdin.\"
echo \"----------------------\"
echo \"b1 = $b1\"

echo

exit 0

</pre>
</div>



<p>
Similarly, an exec &gt;filename command redirects stdout to a designated file. 
</p>
<p>
This sends all command output that would normally go to stdout to that file.
</p>

</div>

</div>

<div id=\"outline-container-3-2\" class=\"outline-3\">
<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> Example 16-2. Redirecting stdout using exec</h3>
<div class=\"outline-text-3\" id=\"text-3-2\">




<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">
#!/bin/bash
# reassign-stdout.sh

LOGFILE=logfile.txt

exec 6>&1           # Link file descriptor #6 with stdout.
                    # Saves stdout.

exec > $LOGFILE     # stdout replaced with file \"logfile.txt\".

# ----------------------------------------------------------- #
# All output from commands in this block sent to file $LOGFILE.

echo -n \"Logfile: \"
date
echo \"-------------------------------------\"
echo

echo \"Output of \\\"ls -al\\\" command\"
echo
ls -al
echo; echo
echo \"Output of \\\"df\\\" command\"
echo
df

# ----------------------------------------------------------- #

exec 1>&6 6>&-      # Restore stdout and close file descriptor #6.

echo
echo \"== stdout now restored to default == \"
echo
ls -al
echo

exit 0


</pre>
</div>



</div>

</div>

<div id=\"outline-container-3-3\" class=\"outline-3\">
<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3</span> Example 16-3. Redirecting both stdin and stdout in the same script with exec</h3>
<div class=\"outline-text-3\" id=\"text-3-3\">





<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">
#!/bin/bash
# upperconv.sh
# Converts a specified input file to uppercase.

E_FILE_ACCESS=70
E_WRONG_ARGS=71

if [ ! -r \"$1\" ]     # Is specified input file readable?
then
  echo \"Can't read from input file!\"
  echo \"Usage: $0 input-file output-file\"
  exit $E_FILE_ACCESS
fi                   #  Will exit with same error
                     #+ even if input file ($1) not specified (why?).

if [ -z \"$2\" ]
then
  echo \"Need to specify output file.\"
  echo \"Usage: $0 input-file output-file\"
  exit $E_WRONG_ARGS
fi

exec 4<&0
exec < $1            # Will read from input file.

exec 7>&1
exec > $2            # Will write to output file.
                     # Assumes output file writable (add check?).

# -----------------------------------------------
    cat - | tr a-z A-Z   # Uppercase conversion.
#   ^^^^^                # Reads from stdin.
#           ^^^^^^^^^^   # Writes to stdout.
# However, both stdin and stdout were redirected.
# -----------------------------------------------

exec 1>&7 7>&-       # Restore stout.
exec 0<&4 4<&-       # Restore stdin.

# After restoration, the following line prints to stdout as expected.
echo \"File \\\"$1\\\" written to \\\"$2\\\" as uppercase conversion.\"

exit 0

</pre>
</div>



<p>
I/O redirection is a clever way of avoiding the dreaded inaccessible variables within a
subshell problem.
</p>
</div>

</div>

<div id=\"outline-container-3-4\" class=\"outline-3\">
<h3 id=\"sec-3-4\"><span class=\"section-number-3\">3.4</span> Example 16-4. Avoiding a subshell</h3>
<div class=\"outline-text-3\" id=\"text-3-4\">




<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

#!/bin/bash
# avoid-subshell.sh
# Suggested by Matthew Walker.

Lines=0

echo

cat myfile.txt | while read line;
                 do {
                   echo $line
                   (( Lines++ ));  #  Incremented values of this variable
                                   #+ inaccessible outside loop.
                                   #  Subshell problem.
                 }
                 done

echo \"Number of lines read = $Lines\"     # 0
                                         # Wrong!

echo \"------------------------\"

exec 3<> myfile.txt
while read line <&3
do {
  echo \"$line\"
  (( Lines++ ));                   #  Incremented values of this variable
                                   #+ accessible outside loop.
                                   #  No subshell, no problem.
}
done
exec 3>&-

echo \"Number of lines read = $Lines\"     # 8

echo

exit 0

# Lines below not seen by script.

$ cat myfile.txt

Line 1.
Line 2.
Line 3.
Line 4.
Line 5.
Line 6.
Line 7.
Line 8.

</pre>
</div>


<p>
from <a href=\"http://www.linuxtopia.org/online_books/advanced_bash_scripting_guide/x13082.html\">http://www.linuxtopia.org/online_books/advanced_bash_scripting_guide/x13082.html</a>
</p></div>
</div>
</div>
</div>

<div id=\"postamble\">
<p class=\"date\">Date: 2013-04-12 Fri</p>
<p class=\"author\">Author: liweilijie</p>
<p class=\"creator\"><a href=\"http://orgmode.org\">Org</a> version 7.9.2 with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> version 23</p>
<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>

</div>
</body>
</html>
") ("title" . "有关重定向") ("categories" "[随笔分类]shell") ("enclosure" ("length" . 0)) ("link" . "http://www.cnblogs.com/liweilijie/archive/2013/04/12/3016274.html") ("permalink" . "http://www.cnblogs.com/liweilijie/archive/2013/04/12/3016274.html") ("postid" . "3016274") ("source") ("userid" . "-2"))
