
(("dateCreated" :datetime (20706 56664)) ("description" . "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
               \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">
<head>
<title>sed与awk基本知识&lt;1&gt;</title>
<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>
<meta name=\"title\" content=\"sed与awk基本知识&lt;1&gt;\"/>
<meta name=\"generator\" content=\"Org-mode\"/>
<meta name=\"generated\" content=\"2013-01-01 Tue\"/>
<meta name=\"author\" content=\"liweilijie\"/>
<meta name=\"description\" content=\"sed 与　awk 基本知识学习\"/>
<meta name=\"keywords\" content=\"sed awk\"/>
<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  {margin-left:auto; margin-right:0px;  text-align:right;}
  .left   {margin-left:0px;  margin-right:auto; text-align:left;}
  .center {margin-left:auto; margin-right:auto; text-align:center;}
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top;  }
  th.right  { text-align:center;  }
  th.left   { text-align:center;   }
  th.center { text-align:center; }
  td.right  { text-align:right;  }
  td.left   { text-align:left;   }
  td.center { text-align:center; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  div.inlinetask {
    padding:10px;
    border:2px solid gray;
    margin:10px;
    background: #ffffcc;
  }
  textarea { overflow-x: auto; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>


</head>
<body>
<div id=\"org-div-home-and-up\" style=\"text-align:right;font-size:70%;white-space:nowrap;\">
 <a accesskey=\"h\" href=\"/liweilijie\"> UP </a>
 |
 <a accesskey=\"H\" href=\"/liweilijie\"> HOME </a>
</div>

<div id=\"preamble\">

</div>

<div id=\"content\">
<h1 class=\"title\">sed与awk基本知识&lt;1&gt;</h1>


<div id=\"table-of-contents\">
<h2>Table of Contents</h2>
<div id=\"text-table-of-contents\">
<ul>
<li><a href=\"#sec-1\">1 sed awk 基础知识</a>
<ul>
<li><a href=\"#sec-1-1\">1.1 ed</a></li>
<li><a href=\"#sec-1-2\">1.2 命令行的语法</a></li>
<li><a href=\"#sec-1-3\">1.3 脚本化</a></li>
<li><a href=\"#sec-1-4\">1.4 使用sed</a>
<ul>
<li><a href=\"#sec-1-4-1\">1.4.1 脚本文件</a></li>
<li><a href=\"#sec-1-4-2\">1.4.2 保存输出</a></li>
<li><a href=\"#sec-1-4-3\">1.4.3 防止输入行的自动显示</a></li>
</ul>
</li>
<li><a href=\"#sec-1-5\">1.5 使用awk</a></li>
<li><a href=\"#sec-1-6\">1.6 同时使用sed与awk</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> sed awk 基础知识</h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p> 
<b>awk</b> 起源于 <b>sed</b> 和 <b>grep</b> , 而不是ed
</p>
<p>
但是ed很古老也很经典.这里特意地学习一下 <b>ed</b> 编辑器.
</p>


</div>

<div id=\"outline-container-1-1\" class=\"outline-3\">
<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> ed</h3>
<div class=\"outline-text-3\" id=\"text-1-1\">


<ol>
<li>ed 的替换命令是 <b>s</b> : 
    <div class=\"cnblogs_Highlighter\">
    <pre class=\"brush:bash\">

    #!/bin/bash
    #TODO(1): [address]s/pattern/replacement/flag
    #pattern是一个正则表达式
    #为了寻找同一行上的多次出现,必须指定 g 作为标志
    s/regular/complex/g

    #TODO(2):上面的命令只能在当前行上操作.而如果要在其他地方操作,则必须指定一个地址.
    /regular/s/regular/complex/g
    #记住:第一个\"regular\"是一个地址,第二个是匹配替换命令的模式.
    #TODO(3): 要将它使用于全局命令,即在地址前放置:g
    g/regular/s/regular/complex/g

    #TODO(3): 地址和模式不必相同:
    g/regular expression/s/regular/complex/g
    #表示在包含字符串\"regular expression\"的任意行上,用\"complex\"代替\"regular\".
    #如果地址与模式相同,可以指定两个连接的定界符(//)来告诉ed
    g/regular/s//complex/g


    </pre>
    </div>
</li>
<li>sed与ed的区别:
<ul>
<li>sed面向流,而ed是一个编辑器.
</li>
<li>sed命令是隐式的全局命令,因为它的每一条命令都应该一个流的一行.而ed默认是单行命令.
</li>
</ul>

</li>
</ol>




<hr/>


</div>

</div>

<div id=\"outline-container-1-2\" class=\"outline-3\">
<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> 命令行的语法</h3>
<div class=\"outline-text-3\" id=\"text-1-2\">

<p>可以大致相同的方式调用sed和awk,命令行语法是:
<b>command [options] script filename</b>
</p>
<p>
另外还有一个共同的处理脚本命令:
<b>sed -f scriptfile inputfile</b>
</p>

</div>

</div>

<div id=\"outline-container-1-3\" class=\"outline-3\">
<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> 脚本化</h3>
<div class=\"outline-text-3\" id=\"text-1-3\">

<p>在sed和awk中,每个指令都包括两个部分:模式和过程.
</p>
<p>
模式是由斜杠(/)分隔的正则表达式,过程指定一个或多个将被执行的动作.
</p>

<hr/>


</div>

</div>

<div id=\"outline-container-1-4\" class=\"outline-3\">
<h3 id=\"sec-1-4\"><span class=\"section-number-3\">1.4</span> 使用sed</h3>
<div class=\"outline-text-3\" id=\"text-1-4\">


<p>
<b>sed [-e] 'instruction' file</b>
</p>
<p>
只有在命令行上给出多个指令时才需要用 <b>-e</b> 选项,它告诉sed将下一个参数解释为指令,当只有一个指令时,sed可以自己做决定.
</p>


<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

#!/bin/bash
# TODO(1): 加上单引号是个很好习惯
sed 's/MA/Massachusetts/' list
sed 's/ MA/, Massachusetts/' list

#有三种方式可以指定命令行上的多重指令:
#TODO(2.1):用分号分隔指令:
sed 's/ MA/,Massachusets/;s/ PA/, Pennsylvania/' list

#TODO(2.2):在每个指令前放置 -e
sed -e 's/ MA/, Massachusetts/' -e 's/ PA/, Pennsylvania/' list

#TODO(2.3):脚本方式


</pre>
</div>


</div>

<div id=\"outline-container-1-4-1\" class=\"outline-4\">
<h4 id=\"sec-1-4-1\"><span class=\"section-number-4\">1.4.1</span> 脚本文件</h4>
<div class=\"outline-text-4\" id=\"text-1-4-1\">




<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

#!/bin/bash
#查看一下脚本内容
cat sedsrc
s/ MA/, Massachusetts/
s/ PA/, Pennsylvaniz/
s/ CA/, California/
s/ VA/, Virginia/

#运行脚本命令
sed -f sedsrc list

</pre>
</div>

</div>

</div>

<div id=\"outline-container-1-4-2\" class=\"outline-4\">
<h4 id=\"sec-1-4-2\"><span class=\"section-number-4\">1.4.2</span> 保存输出</h4>
<div class=\"outline-text-4\" id=\"text-1-4-2\">


<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

#!/bin/bash
sed -f sedsrc list > newlist

</pre>
</div>

</div>

</div>

<div id=\"outline-container-1-4-3\" class=\"outline-4\">
<h4 id=\"sec-1-4-3\"><span class=\"section-number-4\">1.4.3</span> 防止输入行的自动显示</h4>
<div class=\"outline-text-4\" id=\"text-1-4-3\">

<p>sed的默认操作是输出每个输入行, <b>-n</b> 选项可以阻止自动输出,当指定该选项时,每个要生成输出的指令都必须包含打印命令 <b>p</b> .
</p>


<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

#!/bin/bash
sed -n -e 's/MA/Massachusetts/p' list

</pre>
</div>


<hr/>


</div>
</div>

</div>

<div id=\"outline-container-1-5\" class=\"outline-3\">
<h3 id=\"sec-1-5\"><span class=\"section-number-3\">1.5</span> 使用awk</h3>
<div class=\"outline-text-3\" id=\"text-1-5\">


<p>
awk 'instructions' files
</p>
<p>
awk -f script files
</p>
<p>
awk可以用与sed相同方式的输入多重命令行:用分号分隔命令.
</p>


<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

#!/bin/bash
#$0:代表整个输入行;
#$1,$2....表示输入行上的各个字段,应用脚本之前,awk先拆分输入记录

#TODO(1): 这个命令没有指定模式,所以打印语句应用于所有行
awk '{print $1}' list

#TODO(2): 这个命令没有过程,这个默认操作是打印匹配这种模式的每一行:
awk '/MA/' list

#TODO(3): 下面这条命令只输入匹配到的每条记录的第一个字段
awk '/MA/ {print $1}' list

#TODO(4): 用 -F 选项来改变分隔符
awk -F, '/MA/ {print $1}' list

#TODO(5): 将每一个字段单独打印在每一行上,多重命令由分号来分隔:
awk -F, '{print $1; print $2; print $3}' list


</pre>
</div>


<hr/>


</div>

</div>

<div id=\"outline-container-1-6\" class=\"outline-3\">
<h3 id=\"sec-1-6\"><span class=\"section-number-3\">1.6</span> 同时使用sed与awk</h3>
<div class=\"outline-text-3\" id=\"text-1-6\">




<div class=\"cnblogs_Highlighter\">
<pre class=\"brush:bash\">

#!/bin/bash
sed -f nameState list | awk -F, '{print $4}'

sed -f nameState list | awk -F, '{print $4 \", \" $0}'

</pre>
</div>


</div>
</div>
</div>
</div>

<div id=\"postamble\">
<p class=\"date\">Date: 2013-01-01 Tue</p>
<p class=\"author\">Author: liweilijie</p>
<p class=\"creator\"><a href=\"http://orgmode.org\">Org</a> version 7.9.2 with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> version 23</p>
<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>

</div>
</body>
</html>
") ("title" . "sed与awk基本知识<1>") ("categories" "[随笔分类]sedawk") ("enclosure" ("length" . 0)) ("link" . "http://www.cnblogs.com/liweilijie/archive/2013/01/01/2841439.html") ("permalink" . "http://www.cnblogs.com/liweilijie/archive/2013/01/01/2841439.html") ("postid" . "2841439") ("source") ("userid" . "-2"))
