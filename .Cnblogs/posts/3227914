
(("dateCreated" :datetime (20985 11880)) ("description" . "<?xml version=\"1.0\" encoding=\"utf-8\"?>
<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
               \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">
<head>
<title>tcpdump tutorial</title>







<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  html { font-family: Times, serif; font-size: 12pt; }
  .title  { text-align: center; }
  .todo   { color: red; }
  .done   { color: green; }
  .tag    { background-color: #add8e6; font-weight:normal }
  .target { }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  {margin-left:auto; margin-right:0px;  text-align:right;}
  .left   {margin-left:0px;  margin-right:auto; text-align:left;}
  .center {margin-left:auto; margin-right:auto; text-align:center;}
  p.verse { margin-left: 3% }
  pre {
	border: 1pt solid #AEBDCC;
	background-color: #F3F5F7;
	padding: 5pt;
	font-family: courier, monospace;
        font-size: 90%;
        overflow:auto;
  }
  table { border-collapse: collapse; }
  td, th { vertical-align: top;  }
  th.right  { text-align:center;  }
  th.left   { text-align:center;   }
  th.center { text-align:center; }
  td.right  { text-align:right;  }
  td.left   { text-align:left;   }
  td.center { text-align:center; }
  dt { font-weight: bold; }
  div.figure { padding: 0.5em; }
  div.figure p { text-align: center; }
  div.inlinetask {
    padding:10px;
    border:2px solid gray;
    margin:10px;
    background: #ffffcc;
  }
  textarea { overflow-x: auto; }
  .linenr { font-size:smaller }
  .code-highlighted {background-color:#ffff00;}
  .org-info-js_info-navigation { border-style:none; }
  #org-info-js_console-label { font-size:10px; font-weight:bold;
                               white-space:nowrap; }
  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;
                                 font-weight:bold; }
  /*]]>*/-->
</style>
<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012  Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>

</head>
<body>
<div id=\"org-div-home-and-up\" style=\"text-align:right;font-size:70%;white-space:nowrap;\">
 <a accesskey=\"h\" href=\"/liweilijie\"> UP </a>
 |
 <a accesskey=\"H\" href=\"/liweilijie\"> HOME </a>
</div>

<div id=\"preamble\">

</div>

<div id=\"content\">
<h1 class=\"title\">tcpdump tutorial</h1>


<div id=\"table-of-contents\">
<h2>Table of Contents</h2>
<div id=\"text-table-of-contents\">
<ul>
<li><a href=\"#sec-1\">1 Options</a></li>
</ul>
</div>
</div>

<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Options</h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p>
Below are a few options (with examples) that will help you greatly when working with the tool. They're easy to forget and/
or confuse with other types of filters, i.e. ethereal, so hopefully this page can serve as a reference for you, as it does
me.
</p>
<p>
First off, I like to add a few options to the tcpdump command itself, depending on what I'm looking at. The first of these
is -n, which requests that names are not resolved, resulting in the IPs themselves always being displayed. The second is -X
, which displays both hex and ascii content within the packet. The final one is -S, which changes the display of sequence
numbers to absolute rather than relative. The idea there is that you can't see weirdness in the sequence numbers if they're
being hidden from you. Remember, the advantage of using tcpdump vs. another tool is getting manual interaction with the
packets.
</p>
<p>
It's also important to note that tcpdump only takes the first [S:68:S] 96 bytes of data from a packet by default. If you
would like to look at more, add the -s number option to the mix, where number is the number of bytes you want to capture. I
recommend using 0 (zero) for a snaplength, which gets everything. Here's a short list of the options I use most:
</p>
<ul>
<li>-i any : Listen on all interfaces just to see if you're seeing any traffic.
</li>
<li>-n : Don't resolve hostnames.
</li>
<li>-nn : Don't resolve hostnames or port names.
</li>
<li>-X : Show the packet's contents in both hex and ASCII.
</li>
<li>-XX : Same as -X, but also shows the ethernet header.
</li>
<li>-v, -vv, -vvv : Increase the amount of packet information you get back.
</li>
<li>-c : Only get x number of packets and then stop.
</li>
<li>-s : Define the snaplength (size) of the capture in bytes. Use -s0 to get everything, unless you are intentionally
    capturing less.
</li>
<li>-S : Print absolute sequence numbers.
</li>
<li>-e : Get the ethernet header as well.
</li>
<li>-q : Show less protocol information.
</li>
<li>-E : Decrypt IPSEC traffic by providing an encryption key.
</li>
</ul>


<p>
[ The default snaplength as of tcpdump 4.0 has changed from 68 bytes to 96 bytes. While this will give you more of a packet
to see, it still won't get everything. Use -s 1514 to get full coverage ]
</p>
<p>
Basic Usage
</p>
<p>
So, based on the kind of traffic I'm looking for, I use a different combination of options to tcpdump, as can be seen
below:
</p>
<ol>
<li>Basic communication // see the basics without many options


</li>
<li>Basic communication (very verbose) // see a good amount of traffic, with verbosity and no name help


</li>
<li>A deeper look at the traffic // adds -X for payload but doesn't grab any more of the packet


</li>
<li>Heavy packet viewing // the final \"s\" increases the snaplength, grabbing the whole packet

</li>
</ol>


<p>
Here's a capture of exactly two (-c2) ICMP packets (a ping and pong) using some of the options described above. Notice how
much we see about each packet.
</p>
<p>
hermes root # tcpdump -nnvXSs 0 -c2 icmp
tcpdump: listening on eth0, link-type EN10MB (Ethernet), 23:11:10.370321 IP
(tos 0x20, ttl  48, id 34859, offset 0, flags [none], length: 84)
69.254.213.43 &gt; 72.21.34.42: icmp 64: echo request seq 0
</p>
<p>
        0x0000:  4520 0054 882b 0000 3001 7cf5 45fe d52b  E..T.+..0.|.E..+
        0x0010:  4815 222a 0800 3530 272a 0000 25ff d744  H.\"*..50'*..%..D
        0x0020:  ae5e 0500 0809 0a0b 0c0d 0e0f 1011 1213  .^&hellip;&hellip;&hellip;&hellip;..
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223  &hellip;&hellip;&hellip;&hellip;.!\"#
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233  $%&amp;'()*+,-./0123
        0x0050:  3435 3637                                4567
23:11:10.370344 IP (tos 0x20, ttl  64, id 35612, offset 0, flags [none],
length: 84) 72.21.34.42 &gt; 69.254.213.43: icmp 64: echo reply seq 0
        0x0000:  4520 0054 8b1c 0000 4001 6a04 4815 222a  E..T&hellip;.@.j.H.\"*
        0x0010:  45fe d52b 0000 3d30 272a 0000 25ff d744  E..+..=0'*..%..D
        0x0020:  ae5e 0500 0809 0a0b 0c0d 0e0f 1011 1213  .^&hellip;&hellip;&hellip;&hellip;..
        0x0030:  1415 1617 1819 1a1b 1c1d 1e1f 2021 2223  &hellip;&hellip;&hellip;&hellip;.!\"#
        0x0040:  2425 2627 2829 2a2b 2c2d 2e2f 3031 3233  $%&amp;'()*+,-./0123
        0x0050:  3435 3637                                4567
2 packets captured
2 packets received by filter
0 packets dropped by kernel
hermes root #
</p>
<p>
Common Syntax
</p>
<p>
Expressions allow you to trim out various types of traffic and find exactly what you're looking for. Mastering the
expressions and learning to combine them creatively is what makes one truly powerful with tcpdump. There are three main
types of expression: type, dir, and proto.
</p>
<p>
Type options are host, net, and port. Direction is indicated by dir, and there you can have src, dst, src or dst, and src
and dst. Here are a few that you should definitely be comfortable with:
</p>
<ul>
<li>host // look for traffic based on IP address (also works with hostname if you're not using -n)


</li>
<li>src, dst // find traffic from only a source or destination (eliminates one side of a host conversation)


</li>
<li>net // capture an entire network using CIDR notation


</li>
<li>proto // works for tcp, udp, and icmp. Note that you don't have to type proto


</li>
<li>port // see only traffic to or from a certain port

</li>
<li>src, dst port // filter based on the source or destination port


</li>
<li>src/dst, port, protocol // combine all three

</li>
</ul>


<p>
You also have the option to filter by a range of ports instead of declaring them individually, and to only see packets that
are above or below a certain size.
</p>
<ul>
<li>Port Ranges // see traffic to any port in a range
    tcpdump portrange 21-23
</li>
<li>Packet Size Filter // only see packets below or above a certain size (in bytes)
    tcpdump less 32
    tcpdump greater 128

<p>
    [ You can use the symbols for less than, greater than, and less than or equal / greater than or equal signs as well. ]
</p>
<p>
    // filtering for size using symbols
    tcpdump &gt; 32
    tcpdump &lt;= 128
</p></li>
</ul>


<p>
Writing to a File
</p>
<p>
tcpdump allows you to send what you're capturing to a file for later use using the -w option, and then to read it back
using the -r option. This is an excellent way to capture raw traffic and then run it through various tools later.
</p>
<p>
The traffic captured in this way is stored in tcpdump format, which is pretty much universal in the network analysis space.
This means it can be read in by all sorts of tools, including Wireshark, Snort, etc.
</p>
<p>
Capture all Port 80 Traffic to a File
</p>

<p>
Then, at some point in the future, you can then read the traffic back in like so:
</p>
<p>
Read Captured Traffic back into tcpdump
</p>

<p>
Getting Creative
</p>
<p>
Expressions are nice, but the real magic of tcpdump comes from the ability to combine them in creative ways in order to
isolate exactly what you're looking for. There are three ways to do combinations, and if you've studied computers at all
they'll be pretty familar to you:
</p>
<ol>
<li>AND
    and or &amp;&amp;
</li>
<li>OR
    or or ||
</li>
<li>EXCEPT
    not or !
</li>
</ol>


<p>
More Examples
</p>

<p>
tcpdump -nnvvS and src 10.5.2.3 and dst port 3389
</p>

<p>
tcpdump -nvX src net 192.168.0.0/16 and dst net 10.0.0.0/8 or 172.16.0.0/16
</p>

<p>
tcpdump -nvvXSs 1514 dst 192.168.0.2 and src net and not icmp
</p>

<p>
tcpdump -vv src mars and not dst port 22
</p>
<p>
As you can see, you can build queries to find just about anything you need. The key is to first figure out precisely what
you're looking for and then to build the syntax to isolate that specific type of traffic.
</p>
<p>
Grouping
</p>
<p>
Also keep in mind that when you're building complex queries you might have to group your options using single quotes.
Single quotes are used in order to tell tcpdump to ignore certain special characters &ndash; in this case the \"( )\" brackets.
This same technique can be used to group using other expressions such as host, port, net, etc. Take a look at the command
below:
</p>

<p>
tcpdump src 10.0.2.4 and (dst port 3389 or 22)
</p>
<p>
If you tried to run this otherwise very useful command, you'd get an error because of the parenthesis. You can either fix
this by escaping the parenthesis (putting a \\ before each one), or by putting the entire command within single quotes:
</p>

<p>
tcpdump 'src 10.0.2.4 and (dst port 3389 or 22)'
</p>
<p>
Advanced
</p>
<p>
You can also filter based on specific portions of a packet, as well as combine multiple conditions into groups. The former
is useful when looking for only SYNs or RSTs, for example, and the latter for even more advanced traffic isolation.
</p>
<p>
[ Hint: An anagram for the TCP flags: Unskilled Attackers Pester Real Security Folk ]
</p>
<p>
Show me all URGENT (URG) packets&hellip;
</p>

<p>
Show me all ACKNOWLEDGE (ACK) packets&hellip;
</p>

<p>
Show me all PUSH (PSH) packets&hellip;
</p>

<p>
Show me all RESET (RST) packets&hellip;
</p>

<p>
Show me all SYNCHRONIZE (SYN) packets&hellip;
</p>

<p>
Show me all FINISH (FIN) packets&hellip;
</p>

<p>
Show me all SYNCHRONIZE/ACKNOWLEDGE (SYNACK) packets&hellip;
</p>

<p>
[ Note: Only the PSH, RST, SYN, and FIN flags are displayed in tcpdump's flag field output. URGs and ACKs are displayed,
but they are shown elsewhere in the output rather than in the flags field ]
</p>
<p>
Keep in mind the reasons these filters work. The filters above find these various packets because tcp<sup><a class=\"footref\" name=\"fnr-.1\" href=\"#fn-.1\">1</a></sup> looks at offset
13 in the TCP header, the number represents the location within the byte, and the !=0 means that the flag in question is
set to 1, i.e. it's on.
</p>
<p>
As with most powerful tools, however, there are multiple ways to do things. The example below shows another way to capture
packets with specific TCP flags set.
</p>
<p>
Capture TCP Flags Using the tcpflags Option&hellip;
</p>

<p>
Specialized Traffic
</p>
<p>
Finally, there are a few quick recipes you'll want to remember for catching specific and specialized traffic, such as IPv6
and malformed/likely-malicious packets.
</p>
<p>
IPv6 traffic
</p>

<p>
Packets with both the RST and SYN flags set (why?)
</p>

<p>
Traffic with the 'Evil Bit' Set
</p>

<p>
Conclusion
</p>
<p>
Well, this primer should get you going strong, but the man page should always be handy for the most advanced and one-off
usage scenarios. I truly hope this has been useful to you, and feel free to contact me if you have any questions. ::
</p>
<div id=\"footnotes\">
<h2 class=\"footnotes\">Footnotes: </h2>
<div id=\"text-footnotes\">
<p class=\"footnote\"><sup><a class=\"footnum\" name=\"fn-.1\" href=\"#fnr-.1\">1</a></sup> DEFINITION NOT FOUND: 13
</p>

</div>
</div>

</div>
</div>
</div>

<div id=\"postamble\">
<p class=\"date\">Date: 2013-07-31 Wed</p>
<p class=\"author\">Author: liweilijie</p>
<p class=\"creator\"><a href=\"http://orgmode.org\">Org</a> version 7.9.2 with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> version 23</p>
<a href=\"http://validator.w3.org/check?uri=referer\">Validate XHTML 1.0</a>

</div>
</body>
</html>
") ("title" . "tcpdump tutorial") ("enclosure" ("length" . 0)) ("link" . "http://www.cnblogs.com/liweilijie/p/3227914.html") ("permalink" . "http://www.cnblogs.com/liweilijie/p/3227914.html") ("postid" . 3227914) ("source") ("mt_excerpt" . "tcpdump tutorial") ("mt_keywords" . "tcpdump"))
